//========= Copyright TOKI, All rights reserved. ==============================//
//
// Purpose: Maplabs achievements.
//
//=============================================================================//
#include "cbase.h"

#ifdef CLIENT_DLL
#include "achievementmgr.h"
#include "baseachievement.h"

// Create achievement manager object
CAchievementMgr AchievementMgr;

class CAchievementMaplabMenu : public CBaseAchievement
{
protected:

	void Init()
	{
		SetFlags(ACH_SAVE_GLOBAL);
		m_bStoreProgressInSteam = true;
		SetGoal(1);
	}

	// Listen for this event (event must be defined in :/resource/modevents.res)
	virtual void ListenForEvents()
	{
		ListenForGameEvent("joined_smc");
	}

	void FireGameEvent_Internal(IGameEvent *event)
	{
		if (0 == Q_strcmp(event->GetName(), "joined_smc"))
		{
			IncrementCount();
		}
	}
};
DECLARE_ACHIEVEMENT(CAchievementMaplabMenu, ACHIEVEMENT_EVENT_JOIN_SMC, "JOIN_SMC", 5); // yeah not gonna fuck around with renaming smc artifacts

// C stands for component. used to differentiate between achievements and their respective component.

class CAchievementMaplab01Completed : public CBaseAchievement
{
	virtual void Init()
	{
		static const char *szComponents[] =
		{
			"CMAPLAB01_1", "CMAPLAB01_2", "CMAPLAB01_3", "CMAPLAB01_4",
			"CMAPLAB01_5", "CMAPLAB01_6", "CMAPLAB01_7", "CMAPLAB01_8"
		};
		SetFlags(ACH_HAS_COMPONENTS | ACH_LISTEN_COMPONENT_EVENTS | ACH_SAVE_GLOBAL);
		m_pszComponentNames = szComponents;
		m_iNumComponents = ARRAYSIZE(szComponents);
		SetComponentPrefix("CMAPLAB01");
		SetGoal(m_iNumComponents);
		SetHideUntilAchieved(true);
	}

	// don't show progress notifications for this achievement, it's distracting
	virtual bool ShouldShowProgressNotification() { return false; }
};
DECLARE_ACHIEVEMENT(CAchievementMaplab01Completed, ACHIEVEMENT_EVENT_MAPLAB01_ALL, "MAPLAB01_ALL", 5);

class CAchievementTesttube01Completed : public CBaseAchievement
{
	virtual void Init()
	{
		static const char *szComponents[] =
		{
			"CTESTTUBE01_1", "CTESTTUBE01_2", "CTESTTUBE01_3", "CTESTTUBE01_4",
			"CTESTTUBE01_5", "CTESTTUBE01_6", "CTESTTUBE01_7", "CTESTTUBE01_8",
			"CTESTTUBE01_10", "CTESTTUBE01_11", "CTESTTUBE01_12", "CTESTTUBE01_13",
			"CTESTTUBE01_14", "CTESTTUBE01_15", "CTESTTUBE01_16"
		};
		SetFlags(ACH_HAS_COMPONENTS | ACH_LISTEN_COMPONENT_EVENTS | ACH_SAVE_GLOBAL);
		m_pszComponentNames = szComponents;
		m_iNumComponents = ARRAYSIZE(szComponents);
		SetComponentPrefix("CTESTTUBE01");
		SetGoal(m_iNumComponents);
		SetHideUntilAchieved(true);
	}

	// don't show progress notifications for this achievement, it's distracting
	virtual bool ShouldShowProgressNotification() { return false; }
};
DECLARE_ACHIEVEMENT(CAchievementTesttube01Completed, ACHIEVEMENT_EVENT_TESTTUBE01_ALL, "TESTTUBE01_ALL", 5);

class CAchievementMaplab02Completed : public CBaseAchievement
{

	virtual void Init()
	{
		static const char *szComponents[] =
		{
			"CMAPLAB02_1", "CMAPLAB02_2", "CMAPLAB02_3", "CMAPLAB02_4",
			"CMAPLAB02_5", "CMAPLAB02_6", "CMAPLAB02_7"

		};
		SetFlags(ACH_HAS_COMPONENTS | ACH_LISTEN_COMPONENT_EVENTS | ACH_SAVE_GLOBAL);
		m_pszComponentNames = szComponents;
		m_iNumComponents = ARRAYSIZE(szComponents);
		SetComponentPrefix("CMAPLAB02");
		SetGoal(m_iNumComponents);
		SetHideUntilAchieved(true);
	}

	// don't show progress notifications for this achievement, it's distracting
	virtual bool ShouldShowProgressNotification() { return false; }
};
DECLARE_ACHIEVEMENT(CAchievementMaplab02Completed, ACHIEVEMENT_EVENT_MAPLAB02_ALL, "MAPLAB02_ALL", 5);

class CAchievementTesttube02Completed : public CBaseAchievement
{

	virtual void Init()
	{
		static const char *szComponents[] =
		{
			"CTESTTUBE02_1", "CTESTTUBE02_2", "CTESTTUBE02_3", "CTESTTUBE02_4",
			"CTESTTUBE02_5", "CTESTTUBE02_6", "CTESTTUBE02_7", "CTESTTUBE02_8"
		};
		SetFlags(ACH_HAS_COMPONENTS | ACH_LISTEN_COMPONENT_EVENTS | ACH_SAVE_GLOBAL);
		m_pszComponentNames = szComponents;
		m_iNumComponents = ARRAYSIZE(szComponents);
		SetComponentPrefix("CTESTTUBE02");
		SetGoal(m_iNumComponents);
		SetHideUntilAchieved(true);
	}
	virtual bool ShouldShowProgressNotification() { return false; }
};
DECLARE_ACHIEVEMENT(CAchievementTesttube02Completed, ACHIEVEMENT_EVENT_TESTTUBE02_ALL, "TESTTUBE02_ALL", 5);


class CAchievementMaplab03Completed : public CBaseAchievement
{

	virtual void Init()
	{
		static const char *szComponents[] =
		{
			"CMAPLAB03_1", "CMAPLAB03_2", "CMAPLAB03_3", "CMAPLAB03_4",
			"CMAPLAB03_5", "CMAPLAB03_6", "CMAPLAB03_7", "CMAPLAB03_8",
			"CMAPLAB03_9", "CMAPLAB03_10", "CMAPLAB03_11", "CMAPLAB03_12",
			"CMAPLAB03_13", "CMAPLAB03_14"
		};
		SetFlags(ACH_HAS_COMPONENTS | ACH_LISTEN_COMPONENT_EVENTS | ACH_SAVE_GLOBAL);
		m_pszComponentNames = szComponents;
		m_iNumComponents = ARRAYSIZE(szComponents);
		SetComponentPrefix("CMAPLAB03");
		SetGoal(m_iNumComponents);
		SetHideUntilAchieved(true);
	}
	virtual bool ShouldShowProgressNotification() { return false; }
};
DECLARE_ACHIEVEMENT(CAchievementMaplab03Completed, ACHIEVEMENT_EVENT_MAPLAB03_ALL, "MAPLAB03_ALL", 5);


class CAchievementTesttube03Completed : public CBaseAchievement
{

	virtual void Init()
	{
		static const char *szComponents[] =
		{
			"CTESTTUBE03_1", "CTESTTUBE03_2", "CTESTTUBE03_3", "CTESTTUBE03_4",
			"CTESTTUBE03_5", "CTESTTUBE03_6", "CTESTTUBE03_7", "CTESTTUBE03_8",
			"CTESTTUBE03_9", "CTESTTUBE03_10", "CTESTTUBE03_11", "CTESTTUBE03_12",
			"CTESTTUBE03_13", "CTESTTUBE03_14", "CTESTTUBE03_15", "CTESTTUBE03_16"
		};
		SetFlags(ACH_HAS_COMPONENTS | ACH_LISTEN_COMPONENT_EVENTS | ACH_SAVE_GLOBAL);
		m_pszComponentNames = szComponents;
		m_iNumComponents = ARRAYSIZE(szComponents);
		SetComponentPrefix("CTESTTUBE03");
		SetGoal(m_iNumComponents);
		SetHideUntilAchieved(true);
	}
	virtual bool ShouldShowProgressNotification() { return false; }
};
DECLARE_ACHIEVEMENT(CAchievementTesttube03Completed, ACHIEVEMENT_EVENT_TESTTUBE03_ALL, "TESTTUBE03_ALL", 5);

class CAchievementMaplab04Completed : public CBaseAchievement
{

	virtual void Init()
	{
		static const char *szComponents[] =
		{
			"CMAPLAB04_1", "CMAPLAB04_2", "CMAPLAB04_3", "CMAPLAB04_4",
			"CMAPLAB04_5", "CMAPLAB04_6", "CMAPLAB04_7", "CMAPLAB04_8",
			"CMAPLAB04_9", "CMAPLAB04_10", "CMAPLAB04_11"
		};
		SetFlags(ACH_HAS_COMPONENTS | ACH_LISTEN_COMPONENT_EVENTS | ACH_SAVE_GLOBAL);
		m_pszComponentNames = szComponents;
		m_iNumComponents = ARRAYSIZE(szComponents);
		SetComponentPrefix("CMAPLAB04");
		SetGoal(m_iNumComponents);
		SetHideUntilAchieved(true);
	}
	virtual bool ShouldShowProgressNotification() { return false; }
};
DECLARE_ACHIEVEMENT(CAchievementMaplab04Completed, ACHIEVEMENT_EVENT_MAPLAB04_ALL, "MAPLAB04_ALL", 5);

class CAchievementAtom01Completed : public CBaseAchievement
{

	virtual void Init()
	{
		static const char *szComponents[] =
		{
			"CATOM01_1", "CATOM01_2", "CATOM01_3", "CATOM01_4",
			"CATOM01_5", "CATOM01_6", "CATOM01_7", "CATOM01_8",
			"CATOM01_9", "CATOM01_10", "CATOM01_11", "CATOM01_12",
			"CATOM01_13", "CATOM01_14", "CATOM01_15"
		};
		SetFlags(ACH_HAS_COMPONENTS | ACH_LISTEN_COMPONENT_EVENTS | ACH_SAVE_GLOBAL);
		m_pszComponentNames = szComponents;
		m_iNumComponents = ARRAYSIZE(szComponents);
		SetComponentPrefix("CATOM01");
		SetGoal(m_iNumComponents);
		SetHideUntilAchieved(true);
	}
	virtual bool ShouldShowProgressNotification() { return false; }
};
DECLARE_ACHIEVEMENT(CAchievementAtom01Completed, ACHIEVEMENT_EVENT_ATOM01_ALL, "ATOM01_ALL", 5);

class CAchievementTesttube04Completed : public CBaseAchievement
{

	virtual void Init()
	{
		static const char *szComponents[] =
		{
			"CTESTTUBE04_1", "CTESTTUBE04_2", "CTESTTUBE04_3", "CTESTTUBE04_4",
			"CTESTTUBE04_5", "CTESTTUBE04_6", "CTESTTUBE04_7", "CTESTTUBE04_8",
			"CTESTTUBE04_9", "CTESTTUBE04_10", "CTESTTUBE04_11", "CTESTTUBE04_12",
			"CTESTTUBE04_13"
		};
		SetFlags(ACH_HAS_COMPONENTS | ACH_LISTEN_COMPONENT_EVENTS | ACH_SAVE_GLOBAL);
		m_pszComponentNames = szComponents;
		m_iNumComponents = ARRAYSIZE(szComponents);
		SetComponentPrefix("CTESTTUBE04");
		SetGoal(m_iNumComponents);
		SetHideUntilAchieved(true);
	}
	virtual bool ShouldShowProgressNotification() { return false; }
};
DECLARE_ACHIEVEMENT(CAchievementTesttube04Completed, ACHIEVEMENT_EVENT_TESTTUBE04_ALL, "TESTTUBE04_ALL", 5);

class CAchievementMaplab05Completed : public CBaseAchievement
{

	virtual void Init()
	{
		static const char *szComponents[] =
		{
			"CMAPLAB05_1", "CMAPLAB05_2", "CMAPLAB05_3", "CMAPLAB05_4",
			"CMAPLAB05_5", "CMAPLAB05_6", "CMAPLAB05_7", "CMAPLAB05_8",
			"CMAPLAB05_9", "CMAPLAB05_10", "CMAPLAB05_11", "CMAPLAB05_12",
			"CMAPLAB05_13", "CMAPLAB05_14", "CMAPLAB05_15", "CMAPLAB05_16",
			"CMAPLAB05_17", "CMAPLAB05_18", "CMAPLAB05_19", "CMAPLAB05_20",
			"CMAPLAB05_21", "CMAPLAB05_22", "CMAPLAB05_23", "CMAPLAB05_24"
		};
		SetFlags(ACH_HAS_COMPONENTS | ACH_LISTEN_COMPONENT_EVENTS | ACH_SAVE_GLOBAL);
		m_pszComponentNames = szComponents;
		m_iNumComponents = ARRAYSIZE(szComponents);
		SetComponentPrefix("CMAPLAB05");
		SetGoal(m_iNumComponents);
		SetHideUntilAchieved(true);
	}
	virtual bool ShouldShowProgressNotification() { return false; }
};
DECLARE_ACHIEVEMENT(CAchievementMaplab05Completed, ACHIEVEMENT_EVENT_MAPLAB05_ALL, "MAPLAB05_ALL", 5);

// map logic achievements
//
// DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_EXAMPLE, "EXAMPLE", 5);
//"DECLARE_MAP_EVENT_ACHIEVEMENT" is what declares what type the achievement is. In this case a map triggered one.
//"ACHIEVEMENT_EVENT_EXAMPLE" is the name of the achievement itself, needs to be defined in hl2orange.spa.h                                       
//"EXAMPLE" is what actually gets sent to steamworks. Keep in mind that ACHIEVEMENT_EVENT will get automatically filtered away.                                       
// So if you made it say "ACHIEVEMENT_EVENT_MAPLAB89_5" then only "MAPLAB89_5" would be sent to steamworks.
// The last number is apparently the Xbox 360 Gamer Score you would get rewarded for completing the achievement, completely useless but AFAIK required.
//
//
//
// halloween horror
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_MAPLAB01_1, "MAPLAB01_1", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_MAPLAB01_2, "MAPLAB01_2", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_MAPLAB01_3, "MAPLAB01_3", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_MAPLAB01_4, "MAPLAB01_4", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_MAPLAB01_5, "MAPLAB01_5", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_MAPLAB01_6, "MAPLAB01_6", 5); 
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_MAPLAB01_7, "MAPLAB01_7", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_MAPLAB01_8, "MAPLAB01_8", 5);
//
// one room
//
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_TESTTUBE01_1, "TESTTUBE01_1", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_TESTTUBE01_2, "TESTTUBE01_2", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_TESTTUBE01_3, "TESTTUBE01_3", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_TESTTUBE01_4, "TESTTUBE01_4", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_TESTTUBE01_5, "TESTTUBE01_5", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_TESTTUBE01_6, "TESTTUBE01_6", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_TESTTUBE01_7, "TESTTUBE01_7", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_TESTTUBE01_8, "TESTTUBE01_8", 5);
//DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_TESTTUBE01_9, "TESTTUBE01_9", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_TESTTUBE01_10, "TESTTUBE01_10", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_TESTTUBE01_11, "TESTTUBE01_11", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_TESTTUBE01_12, "TESTTUBE01_12", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_TESTTUBE01_13, "TESTTUBE01_13", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_TESTTUBE01_14, "TESTTUBE01_14", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_TESTTUBE01_15, "TESTTUBE01_15", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT( ACHIEVEMENT_EVENT_TESTTUBE01_16, "TESTTUBE01_16", 5);
//
// episode one
//
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB02_1, "MAPLAB02_1", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB02_2, "MAPLAB02_2", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB02_3, "MAPLAB02_3", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB02_4, "MAPLAB02_4", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB02_5, "MAPLAB02_5", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB02_6, "MAPLAB02_6", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB02_7, "MAPLAB02_7", 5);
//
// companion piece
//
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE02_1, "TESTTUBE02_1", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE02_2, "TESTTUBE02_2", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE02_3, "TESTTUBE02_3", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE02_4, "TESTTUBE02_4", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE02_5, "TESTTUBE02_5", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE02_6, "TESTTUBE02_6", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE02_7, "TESTTUBE02_7", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE02_8, "TESTTUBE02_8", 5);
//
//
//
// runthinkshootliveville2
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB03_1, "MAPLAB03_1", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB03_2, "MAPLAB03_2", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB03_3, "MAPLAB03_3", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB03_4, "MAPLAB03_4", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB03_5, "MAPLAB03_5", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB03_6, "MAPLAB03_6", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB03_7, "MAPLAB03_7", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB03_8, "MAPLAB03_8", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB03_9, "MAPLAB03_9", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB03_10, "MAPLAB03_10", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB03_11, "MAPLAB03_11", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB03_12, "MAPLAB03_12", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB03_13, "MAPLAB03_13", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB03_14, "MAPLAB03_14", 5);
//
//
//
// abstraction
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE03_1, "TESTTUBE03_1", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE03_2, "TESTTUBE03_2", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE03_3, "TESTTUBE03_3", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE03_4, "TESTTUBE03_4", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE03_5, "TESTTUBE03_5", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE03_6, "TESTTUBE03_6", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE03_7, "TESTTUBE03_7", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE03_8, "TESTTUBE03_8", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE03_9, "TESTTUBE03_9", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE03_10, "TESTTUBE03_10", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE03_11, "TESTTUBE03_11", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE03_12, "TESTTUBE03_12", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE03_13, "TESTTUBE03_13", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE03_14, "TESTTUBE03_14", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE03_15, "TESTTUBE03_15", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE03_16, "TESTTUBE03_16", 5);
//
//
//
// Think Tank
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB04_1, "MAPLAB04_1", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB04_2, "MAPLAB04_2", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB04_3, "MAPLAB04_3", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB04_4, "MAPLAB04_4", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB04_5, "MAPLAB04_5", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB04_6, "MAPLAB04_6", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB04_7, "MAPLAB04_7", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB04_8, "MAPLAB04_8", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB04_9, "MAPLAB04_9", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB04_10, "MAPLAB04_10", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB04_11, "MAPLAB04_11", 5);
//
//
//
// Blade
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_ATOM01_1, "ATOM01_1", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_ATOM01_2, "ATOM01_2", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_ATOM01_3, "ATOM01_3", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_ATOM01_4, "ATOM01_4", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_ATOM01_5, "ATOM01_5", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_ATOM01_6, "ATOM01_6", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_ATOM01_7, "ATOM01_7", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_ATOM01_8, "ATOM01_8", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_ATOM01_9, "ATOM01_9", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_ATOM01_10, "ATOM01_10", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_ATOM01_11, "ATOM01_11", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_ATOM01_12, "ATOM01_12", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_ATOM01_13, "ATOM01_13", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_ATOM01_14, "ATOM01_14", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_ATOM01_15, "ATOM01_15", 5);
//
//
//
// 1,000,000,000 Units
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE04_1, "TESTTUBE04_1", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE04_2, "TESTTUBE04_2", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE04_3, "TESTTUBE04_3", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE04_4, "TESTTUBE04_4", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE04_5, "TESTTUBE04_5", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE04_6, "TESTTUBE04_6", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE04_7, "TESTTUBE04_7", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE04_8, "TESTTUBE04_8", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE04_9, "TESTTUBE04_9", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE04_10, "TESTTUBE04_10", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE04_11, "TESTTUBE04_11", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE04_12, "TESTTUBE04_12", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_TESTTUBE04_13, "TESTTUBE04_13", 5);
//
//
//
// Abridged
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_1, "MAPLAB05_1", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_2, "MAPLAB05_2", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_3, "MAPLAB05_3", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_4, "MAPLAB05_4", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_5, "MAPLAB05_5", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_6, "MAPLAB05_6", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_7, "MAPLAB05_7", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_8, "MAPLAB05_8", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_9, "MAPLAB05_9", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_10, "MAPLAB05_10", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_11, "MAPLAB05_11", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_12, "MAPLAB05_12", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_13, "MAPLAB05_13", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_14, "MAPLAB05_14", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_15, "MAPLAB05_15", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_16, "MAPLAB05_16", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_17, "MAPLAB05_17", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_18, "MAPLAB05_18", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_19, "MAPLAB05_19", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_20, "MAPLAB05_20", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_21, "MAPLAB05_21", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_22, "MAPLAB05_22", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_23, "MAPLAB05_23", 5);
DECLARE_MAP_EVENT_ACHIEVEMENT(ACHIEVEMENT_EVENT_MAPLAB05_24, "MAPLAB05_24", 5);

#endif MAPLAB